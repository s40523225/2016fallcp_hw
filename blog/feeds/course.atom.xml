<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>2016Fall 計算機程式課程網誌 (虎尾科大MDE)</title><link href="./" rel="alternate"></link><link href="./feeds/course.atom.xml" rel="self"></link><id>./</id><updated>2016-12-04T13:00:00+08:00</updated><entry><title>計算機程式 W13</title><link href="./ji-suan-ji-cheng-shi-w13.html" rel="alternate"></link><published>2016-12-04T13:00:00+08:00</published><updated>2016-12-04T13:00:00+08:00</updated><author><name>yen</name></author><id>tag:,2016-12-04:./ji-suan-ji-cheng-shi-w13.html</id><summary type="html">&lt;p&gt;在機械設計工程系的計算機程式課程中, 學習 Python3 的基本目的, 希望在最短時間內, 讓學員能夠除了在身旁的電腦或筆電上, 利用 Python3 程式語法進行各種資料處理與運算外, 還希望學員能夠透過編寫網際程式, 利用網站執行協同設計程式.&lt;/p&gt;


&lt;h3&gt;Python3 能做什麼?&lt;/h3&gt;
&lt;p&gt;Python3 指的是 Python 程式語言第 3 版, 是一種解譯式泛用型程式語言, 能夠在程式碼編寫好了之後, 馬上利用 Python3 解譯器執行, 程式碼是在執行當下才自動轉為機器碼, 因此使用者可以最簡便的方式使用 Python3.&lt;/p&gt;
&lt;p&gt;在大一的計算機課程中, 我們利用 Python 編寫的 &lt;a href="http://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 作為近端的資料管理與整合程式開發中心, 並利用 Python 編寫的 &lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; 工具, 將使用者建立的 &lt;a href="https://en.wikipedia.org/wiki/Markdown"&gt;Markdown&lt;/a&gt; 格式檔案, 轉為組成 Blog 系統所需要的 html 格式檔案. 使用者所編寫的 Markdown 檔案中可以嵌入格式與 Python3 相容的 &lt;a href="http://www.brython.info/"&gt;Brython&lt;/a&gt; 程式碼, 也可以直接在瀏覽器中執行這些 Brython 程式, 進行網際環境中的資料處理與 2D/3D 靜態與動態繪圖.&lt;/p&gt;
&lt;p&gt;因此, 在這門課程的範疇中, Python3 能夠做什麼? 簡單說, 我們在此所學習的 Python3 計算機程式語法, 可以在單機操作系統中, 以及瀏覽器中利用電腦進行資料處理、數值運算與繪圖.&lt;/p&gt;
&lt;h3&gt;Python3 的資料處理&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 利用大綱模式管理資料, 就是 Python3 程式應用的範例, 至於 &lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; 套件將 Markdown 檔案轉為 Blog 專用的 html 檔案, 也是一系列利用 Python3 指令與語法進行資料處理的過程.&lt;/p&gt;
&lt;p&gt;課程進行初始, 本課程利用 Python3 程式進行學員資料的讀取、分組排序, 轉而利用 Brython 直接在網頁上處理學員資料, 也是 Python3 程式進行資料處理的應用之一.&lt;/p&gt;
&lt;h3&gt;Python3 的數值運算&lt;/h3&gt;
&lt;p&gt;在工程應用中, 最簡單的數值運算就是各種工程尺寸與單位的換算, 在本課程中, 使用者可以利用 Python3 程式語法建立單機與網頁上執行的物理量單位換算程式.&lt;/p&gt;
&lt;h3&gt;Python3 的繪圖&lt;/h3&gt;
&lt;p&gt;本課程中的 Python3 繪圖應用以在瀏覽器中執行為主, 使用者學會基本的 Brython 程式語法以及 html5 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"&gt;Canvas&lt;/a&gt; 繪圖指令後, 就可以直接將 Canvas 繪圖程式寫在 Markdown 檔案中, 然後再利用 &lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; 將檔案轉為 html&lt;/p&gt;
&lt;h3&gt;Python 程式執行&lt;/h3&gt;
&lt;p&gt;由於本課程主要在 Windows 10 環境中, 以可攜的 &lt;a href="http://conda.pydata.org/miniconda.html"&gt;Miniconda&lt;/a&gt; Python 3.5 系統為主, 使用者啟動後 ,可以利用可攜系統對應的命令列, 輸入 python 後帶出解譯器環境, 就可以直接下指令執行 Python3 程式語法.&lt;/p&gt;
&lt;p&gt;此外, 若使用者將 Python3 程式存成 ex1.py, 也可以直接在可攜系統對應的命令列中, 透過 python ex1.py 執行 ex1.py 程式.&lt;/p&gt;
&lt;p&gt;當然, 假如 ex1.py 已經利用 Leo Editor 的 @edit 節點指令導入, 也可以在 Leo Editor 環境中, 透過 Ctrl+b 按鍵執行, 而且假如要在 Leo Editor 的 Log 視窗中列印, 可以使用 g.es() 函式, 其中的 g 代表 Leo Editor 的 global 物件, 而 es() 函式則代表 echo string.&lt;/p&gt;
&lt;p&gt;本課程 Brython 程式的執行則牽涉 3 個步驟, 也就是導入 brython.js, 啟動 brython, 最後才能 html5 的檔案中, 利用 script 標註執行 Brython 程式.&lt;/p&gt;
&lt;p&gt;接下來我們將利用 Hello Mde 字串的列印進行示範.&lt;/p&gt;
&lt;p&gt;操作系統中, 進入解譯環境列印:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://chiamingyen.github.io/kmolab_data/files/201612/hello_interpreter.png" width="600" /&gt;&lt;/p&gt;
&lt;p&gt;操作系統中, 呼叫 python 執行 ex1.py 列印:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://chiamingyen.github.io/kmolab_data/files/201612/hello_command.png" width="600" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://chiamingyen.github.io/kmolab_data/files/201612/hello_command2.png" width="600" /&gt;&lt;/p&gt;
&lt;p&gt;Leo Editor 導入 ex1.py 當作節內容後, 按下 Ctrl+b 列印:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://chiamingyen.github.io/kmolab_data/files/201612/leo_editor_execution.png" width="600" /&gt;&lt;/p&gt;
&lt;p&gt;Leo Editor 導入 ex1.py 後, 改用 g.es() 函式, 按下 Ctrl+b 列印:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://chiamingyen.github.io/kmolab_data/files/201612/leo_editor_execution2.png" width="600" /&gt;&lt;/p&gt;
&lt;p&gt;在瀏覽器中以 alert() 函式列印:&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下可以執行  Brython 程式 --&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import alert

def echo(ev):
    alert("Hello Mde")

doc['alert'].bind('click',echo)
&lt;/script&gt;

&lt;p&gt;&lt;button id="alert"&gt;呼叫 alert 列印!&lt;/button&gt;&lt;/p&gt;
&lt;pre class="brush: python"&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import alert

def echo(ev):
    alert("Hello Mde")

doc['alert'].bind('click',echo)
&lt;/script&gt;
&lt;button id="alert"&gt;呼叫 alert 列印!&lt;/button&gt;
&lt;/pre&gt;

&lt;p&gt;在瀏覽器中, 直接將執行結果嵌入 html 網頁中:&lt;/p&gt;
&lt;div id="ex1"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
# 特殊 html 標註必須透過 html 模組呼叫
# http://www.brython.info/static_doc/en/html.html
#from browser import html

container = doc["ex1"]
container &lt;= "Hello Mde"
&lt;/script&gt;

&lt;pre class="brush: python"&gt;
&lt;div id="ex1"&gt;&lt;/div&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
# 特殊 html 標註必須透過 html 模組呼叫
# http://www.brython.info/static_doc/en/html.html
#from browser import html

container = doc["ex1"]
container &lt;= "Hello Mde"
&lt;/script&gt;
&lt;/pre&gt;

&lt;h3&gt;Python3 的繪圖&lt;/h3&gt;
&lt;canvas id="bat" width="500" height="200"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["bat"]
ctx = canvas.getContext("2d")

# 開始畫圖
ctx.beginPath()
# 設定線的寬度為 1 個單位
ctx.lineWidth = 1
# 利用 transform 將 y 座標反轉, 且 offset canvas.height
# (X scale, X skew, Y skew, Y scale, X offset, Y offset)
# 繪圖座標放大 5 倍, 並配合圖形位置進行座標轉換
ctx.transform(5, 0, 0, -5, canvas.width/2, canvas.height/2)
bat_points = [(5, -1), (6, -2), (8, 0), (10, 4), (12, 8), (13, 12), (13, 16), (15, 15), (19, 15), (22, 15), (24, 15), (26, 16), (25, 14), (23, 10),
(22, 6), (19, 5), (17, 3), (16, 1), (15, -3), (15, -7), (13, -8), (11, -10), (9, -12), (8, -14), (7, -18), (5, -16), (1, -14), (0, -14), (-4, -15),
(-6, -17), (-8, -15), (-10, -13), (-11, -12), (-12, -12), (-13, -12), (-14, -13), (-17, -15), (-18, -15), (-22, -13), (-24, -12), (-25, -12), (-
27, -13), (-25, -11), (-23, -8), (-21, -5), (-19, 0), (-15, -2), (-12, -4), (-10, -5), (-7, -6), (-4, -6), (-1, -6), (-1, -3), (-2, 1), (0, -1), (1, 0),
(2, 0), (3, 1), (3, 3), (5, -1)]

ctx.moveTo(3, 3)
for point in bat_points:
    ctx.lineTo(point[0],point[1])
ctx.stroke()
ctx.closePath()
&lt;/script&gt;

&lt;pre class="brush: python"&gt;
&lt;canvas id="bat" width="500" height="200"&gt;&lt;/canvas&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["bat"]
ctx = canvas.getContext("2d")

# 開始畫圖
ctx.beginPath()
# 設定線的寬度為 1 個單位
ctx.lineWidth = 1
# 利用 transform 將 y 座標反轉, 且 offset canvas.height
# (X scale, X skew, Y skew, Y scale, X offset, Y offset)
# 繪圖座標放大 5 倍, 並配合圖形位置進行座標轉換
ctx.transform(5, 0, 0, -5, canvas.width/2, canvas.height/2)
bat_points = [(5, -1), (6, -2), (8, 0), (10, 4), (12, 8), (13, 12), (13, 16), (15, 15), (19, 15), (22, 15), (24, 15), (26, 16), (25, 14), (23, 10),
(22, 6), (19, 5), (17, 3), (16, 1), (15, -3), (15, -7), (13, -8), (11, -10), (9, -12), (8, -14), (7, -18), (5, -16), (1, -14), (0, -14), (-4, -15),
(-6, -17), (-8, -15), (-10, -13), (-11, -12), (-12, -12), (-13, -12), (-14, -13), (-17, -15), (-18, -15), (-22, -13), (-24, -12), (-25, -12), (-
27, -13), (-25, -11), (-23, -8), (-21, -5), (-19, 0), (-15, -2), (-12, -4), (-10, -5), (-7, -6), (-4, -6), (-1, -6), (-1, -3), (-2, 1), (0, -1), (1, 0),
(2, 0), (3, 1), (3, 3), (5, -1)]

ctx.moveTo(3, 3)
for point in bat_points:
    ctx.lineTo(point[0],point[1])
ctx.stroke()
ctx.closePath()
&lt;/script&gt;
&lt;/pre&gt;</summary><category term="Brython"></category></entry><entry><title>W12 Brython 繪圖練習</title><link href="./w12-brython-hui-tu-lian-xi.html" rel="alternate"></link><published>2016-12-02T12:00:00+08:00</published><updated>2016-12-02T12:00:00+08:00</updated><author><name>yen</name></author><id>tag:,2016-12-02:./w12-brython-hui-tu-lian-xi.html</id><summary type="html">&lt;p&gt;Brython 繪圖&lt;/p&gt;


&lt;p&gt;繪圖流程, 導入程式庫, 啟動, 然後引用各種模組開始繪圖.&lt;/p&gt;
&lt;p&gt;以下利用函式定義進行和弦底稿繪圖:&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫圖 --&gt;

&lt;canvas id="chord1" width="600" height="400"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["chord1"]
ctx = canvas.getContext("2d")

def background(x, y, xinc, yinc, xnum, ynum, ctx):
    # 水平線
    for i in range(ynum+1):
        ctx.beginPath()
    # 設定線的寬度為 1 個單位
        if i == 0:
            ctx.lineWidth = 7
        else:
            ctx.lineWidth = 1
        ctx.moveTo(x-1, y+i*yinc)
        ctx.lineTo(x+xnum*xinc+1, y+i*yinc)
        # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()

    # 垂直線
    for i in range(xnum+1):
        ctx.beginPath()
    # 設定線的寬度為 1 個單位
        ctx.lineWidth = 1
        ctx.moveTo(x+i*xinc, y)
        ctx.lineTo(x+i*xinc, y+ynum*yinc)
        # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()

def canvasText(x, y, fontSize, string, sup, sub, color, ctx):
    # 標定各弦音符號, 以及把位編號
    ctx.beginPath()
    ctx.fillStyle = color
    ctx.strokeStyle = color
    #ctx.font = "20px Arial"
    ctx.font = str(fontSize)+ "px Arial"
    ctx.fillText(string, x, y)
    ctx.font = str(fontSize-8)+ "px Arial"
    if sup != "":
        ctx.fillText(sup, x+fontSize/1.6, y-fontSize/2)
    if sub != "":
        ctx.fillText(sup, x+fontSize/1.6, y)
    ctx.fill()
    ctx.stroke()
    ctx.closePath()

w = 20
h = 30
background(100, 100, w, h, 5, 5, ctx)
mylist = ["E", "A", "D", "G", "B", "E"]
num = 0
for s in mylist:
    #canvasText(100,  80, 20, "A", "b", "", "black", ctx)
    canvasText(100+num*w,  80, 20, s, "", "", "black", ctx)
    num = num + 1
&lt;/script&gt;

&lt;p&gt;上述繪圖的程式碼:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫圖 --&gt;
&lt;canvas id="chord1" width="600" height="400"&gt;&lt;/canvas&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["chord1"]
ctx = canvas.getContext("2d")

def background(x, y, xinc, yinc, xnum, ynum, ctx):
    # 水平線
    for i in range(ynum+1):
        ctx.beginPath()
    # 設定線的寬度為 1 個單位
        if i == 0:
            ctx.lineWidth = 7
        else:
            ctx.lineWidth = 1
        ctx.moveTo(x-1, y+i*yinc)
        ctx.lineTo(x+xnum*xinc+1, y+i*yinc)
        # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()

    # 垂直線
    for i in range(xnum+1):
        ctx.beginPath()
    # 設定線的寬度為 1 個單位
        ctx.lineWidth = 1
        ctx.moveTo(x+i*xinc, y)
        ctx.lineTo(x+i*xinc, y+ynum*yinc)
        # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()

def canvasText(x, y, fontSize, string, sup, sub, color, ctx):
    # 標定各弦音符號, 以及把位編號
    ctx.beginPath()
    ctx.fillStyle = color
    ctx.strokeStyle = color
    #ctx.font = "20px Arial"
    ctx.font = str(fontSize)+ "px Arial"
    ctx.fillText(string, x, y)
    ctx.font = str(fontSize-8)+ "px Arial"
    if sup != "":
        ctx.fillText(sup, x+fontSize/1.6, y-fontSize/2)
    if sub != "":
        ctx.fillText(sup, x+fontSize/1.6, y)
    ctx.fill()
    ctx.stroke()
    ctx.closePath()

w = 20
h = 30
background(100, 100, w, h, 5, 5, ctx)
canvasText(100,  80, 20, "A", "b", "", "black", ctx)
&lt;/script&gt;
&lt;/pre&gt;</summary><category term="Brython"></category></entry><entry><title>W11 Brython 繪圖範例</title><link href="./w11-brython-hui-tu-fan-li.html" rel="alternate"></link><published>2016-11-21T12:00:00+08:00</published><updated>2016-11-21T12:00:00+08:00</updated><author><name>yen</name></author><id>tag:,2016-11-21:./w11-brython-hui-tu-fan-li.html</id><summary type="html">&lt;p&gt;Brython 繪圖&lt;/p&gt;


&lt;p&gt;繪圖流程, 導入程式庫, 啟動, 然後引用各種模組開始繪圖&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫圖 --&gt;

&lt;canvas id="chord1" width="600" height="400"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["chord1"]
ctx = canvas.getContext("2d")

'''
# 改用 background 函式繪圖
# 水平線
for i in range(5):
    ctx.beginPath()
# 設定線的寬度為 1 個單位
    if i == 0:
        ctx.lineWidth = 7
    else:
        ctx.lineWidth = 1
    ctx.moveTo(99, 100+i*30)
    ctx.lineTo(201, 100+i*30)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    ctx.stroke()
    ctx.closePath()

# 垂直線
for i in range(6):
    ctx.beginPath()
# 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    ctx.moveTo(100+i*20, 100)
    ctx.lineTo(100+i*20, 220)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    ctx.stroke()
    ctx.closePath()
'''
def canvasText(x, y, fontSize, string, sup, sub, color, ctx):
    # 標定各弦音符號, 以及把位編號
    ctx.beginPath()
    ctx.fillStyle = color
    ctx.strokeStyle = color
    #ctx.font = "20px Arial"
    ctx.font = str(fontSize)+ "px Arial"
    ctx.fillText(string, x, y)
    ctx.font = str(fontSize-8)+ "px Arial"
    if sup != "":
        ctx.fillText(sup, x+fontSize/1.6, y-fontSize/2)
    if sub != "":
        ctx.fillText(sup, x+fontSize/1.6, y)
    ctx.fill()
    ctx.stroke()
    ctx.closePath()

# 設法利用運算印出吉他各把位的音名
def doreme(x, y, fontSize, order, ctx):
    # EADGBE (guitar string)
    # FgGaAbBCdDeE (C=Do, D=Re, E=Mi)
    #簡譜 1 2 3 4 5 6 7 
    #音名 C D E F G A B 
    #唱名 Do Re Mi Fa Sol La Ti 

    # 讓音名數列可以每 12 音名後, 升高 key 後從頭開始
    if order &gt; 12:
        order = order % 12

    if order == 1:
        canvasText(x, y, fontSize, "A", "", "", "black", ctx)
    elif order ==2:
        canvasText(x, y, fontSize, "B", "b", "", "red", ctx)
    elif order == 3:
        canvasText(x, y, fontSize, "B", "", "", "black", ctx)
    elif order == 4:
        canvasText(x, y, fontSize, "C", "", "", "black", ctx)
    elif order == 5:
        canvasText(x, y, fontSize, "D", "b", "", "red", ctx)
    elif order == 6:
        canvasText(x, y, fontSize, "D", "", "", "black", ctx)
    elif order == 7:
        canvasText(x, y, fontSize, "E", "b", "", "red", ctx)
    elif order == 8:
        canvasText(x, y, fontSize, "E", "", "", "black", ctx)
    elif order == 9:
        canvasText(x, y, fontSize, "F", "", "", "black", ctx)
    elif order == 10:
        canvasText(x, y, fontSize, "G", "b", "", "red", ctx)
    elif order == 11:
        canvasText(x, y, fontSize, "G", "", "", "black", ctx)
    elif order == 12:
        canvasText(x, y, fontSize, "A", "b", "", "red", ctx)
    else:
        canvasText(x, y, fontSize, "Error", "", "", "red", ctx)

def background(x, y, xinc, yinc, xnum, ynum, ctx):
    # 水平線
    for i in range(ynum+1):
        ctx.beginPath()
    # 設定線的寬度為 1 個單位
        if i == 0:
            ctx.lineWidth = 7
        else:
            ctx.lineWidth = 1
        ctx.moveTo(x-1, y+i*yinc)
        ctx.lineTo(x+xnum*xinc+1, y+i*yinc)
        # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()

    # 垂直線
    for i in range(xnum+1):
        ctx.beginPath()
    # 設定線的寬度為 1 個單位
        ctx.lineWidth = 1
        ctx.moveTo(x+i*xinc, y)
        ctx.lineTo(x+i*xinc, y+ynum*yinc)
        # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()
    # 標定各弦音符號, 以及把位編號
    ctx.beginPath()
    ctx.fillStyle = 'black'
    ctx.strokeStyle = "black"
    ctx.font = "20px Arial"
    sixString = ["E", "A", "D", "G", "B", "E"]
    stringNum = 0
    for i in sixString:
        ctx.fillText(i, x-7+stringNum*xinc, y-30)
        stringNum = stringNum + 1
    ctx.fill()
    ctx.stroke()
    ctx.closePath()
    # EADGBE (guitar string)
    # FgGaAbBCdDeE (C=Do, D=Re, E=Mi)
    canvasText(x, y-50, 20, "A", "", "", "black", ctx)
    canvasText(x+xinc, y-50, 20, "B", "b", "", "red", ctx)
    canvasText(x+xinc*2, y-50, 20, "B", "", "", "black", ctx)
    canvasText(x+xinc*3, y-50, 20, "C", "", "", "black", ctx)
    canvasText(x+xinc*4, y-50, 20, "D", "b", "", "red", ctx)
    canvasText(x+xinc*5, y-50, 20, "D", "", "", "black", ctx)
    canvasText(x+xinc*6, y-50, 20, "E", "b", "", "red", ctx)
    canvasText(x+xinc*7, y-50, 20, "E", "", "", "black", ctx)
    canvasText(x+xinc*8, y-50, 20, "F", "", "", "black", ctx)
    canvasText(x+xinc*9, y-50, 20, "G", "b", "", "red", ctx)
    canvasText(x+xinc*10, y-50, 20, "G", "", "", "black", ctx)
    canvasText(x+xinc*11, y-50, 20, "A", "b", "", "red", ctx)
    ####################################
    # 以下利用數列運算, 從已知第1把位的音名分別推算各把位的音名
    # 吉他初始音名次序 816(11)38
    ####################################
    firstBar = [8, 1, 6, 11, 3, 8]
    # j 為往下增量
    for j in range(4):
        # k 為 往右把位初始值
        fontSize = 15 
        for k in range(6):
            bx = x + (k)*w - fontSize/3
            by = y + (j)*h+h/2 + fontSize/2
            order = firstBar[k] + j + 1
            doreme(bx, by, fontSize, order, ctx)


# 一開始 x, y 為圓球圓心, 但是為了配合和弦繪圖
# 將 x, y 改為和弦的左上角座標 x, y
# 配合 w, h, wcoord, hcoord 進行運算得到圓的圓心座標 bx, by
#def ball(x, y, w, h , wcoord, hcoord, r, color, ctx):
def ball(x, y, w, h , wcoord, hcoord, color, ctx):
    bx = x + (wcoord-1)*w
    by = y + (hcoord-1)*h+h/2
    if w &lt; h:
        r2 = w/2 -2
    else:
        r2 = h/2 -2
    ctx.beginPath()
    #ctx.fillStyle = 'black'
    ctx.fillStyle = color
    #ctx.strokeStyle = "black"
    ctx.strokeStyle = color
    #ctx.arc(50, 80, 9, 0, 2*math.pi, False)
    ctx.arc(bx, by, r2, 0, 2*math.pi, False)
    # 為了疊上各把位的音名, 暫時不填色
    #ctx.fill()
    ctx.stroke()
    ctx.closePath()

x = 300
y = 200
w = 20
h = 30
# 將前面的水平線與垂直線繪圖改用 background 繪圖
background(100, 100, w, h, 5, 4, ctx)
background(x, y, w, h, 5, 4, ctx)
#background(100, 300, 10, 10, 5, 4, ctx)
#background(300, 100, 10, 10, 5, 12, ctx)
# 配合  300, 300 的和絃背景, w=30, h=30, (1,1) 位置放入圓
for i in range( 6):
    for j in range(3):
        ball(x, y, w, h, i+1, j+1, 'black', ctx)
ball(x, y, w, h, 1, 4, 'red', ctx)
#ball(300, 300, 30, 20, 1, 1, 9, 'black', ctx)
&lt;/script&gt;

&lt;p&gt;上述繪圖第一部分使用迴圈繪製水平線與垂直線:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
&lt;!-- 以下實際利用  Brython 畫圖 --&gt;
&lt;canvas id="chord1" width="600" height="400"&gt;&lt;/canvas&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["chord1"]
ctx = canvas.getContext("2d")

# 水平線
for i in range(5):
    ctx.beginPath()
# 設定線的寬度為 1 個單位
    if i == 0:
        ctx.lineWidth = 7
    else:
        ctx.lineWidth = 1
    ctx.moveTo(99, 100+i*30)
    ctx.lineTo(201, 100+i*30)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    ctx.stroke()
    ctx.closePath()

# 垂直線
for i in range(6):
    ctx.beginPath()
# 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    ctx.moveTo(100+i*20, 100)
    ctx.lineTo(100+i*20, 220)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    ctx.stroke()
    ctx.closePath()
ctx.closePath()
&lt;/script&gt;
&lt;/pre&gt;

&lt;p&gt;至於將繪圖內容納入 def 函式定義格式後:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
&lt;!-- 以下實際利用  Brython 畫圖 --&gt;
&lt;canvas id="chord1" width="600" height="400"&gt;&lt;/canvas&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["chord1"]
ctx = canvas.getContext("2d")

def background(x, y, xinc, yinc, xnum, ynum, ctx):
    # 水平線
    for i in range(ynum+1):
        ctx.beginPath()
    # 設定線的寬度為 1 個單位
        if i == 0:
            ctx.lineWidth = 7
        else:
            ctx.lineWidth = 1
        ctx.moveTo(x-1, y+i*yinc)
        ctx.lineTo(x+xnum*xinc+1, y+i*yinc)
        # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()

    # 垂直線
    for i in range(xnum+1):
        ctx.beginPath()
    # 設定線的寬度為 1 個單位
        ctx.lineWidth = 1
        ctx.moveTo(x+i*xinc, y)
        ctx.lineTo(x+i*xinc, y+ynum*yinc)
        # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()
    ctx.closePath()

background(300, 300, 10, 10, 5, 4, ctx)
background(100, 300, 10, 10, 5, 4, ctx)
background(300, 100, 10, 10, 5, 12, ctx)
&lt;/script&gt;
&lt;/pre&gt;

&lt;p&gt;之後進一步將 background 與 ball 配合進行函式設計後:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
def background(x, y, xinc, yinc, xnum, ynum, ctx):
    # 水平線
    for i in range(ynum+1):
        ctx.beginPath()
    # 設定線的寬度為 1 個單位
        if i == 0:
            ctx.lineWidth = 7
        else:
            ctx.lineWidth = 1
        ctx.moveTo(x-1, y+i*yinc)
        ctx.lineTo(x+xnum*xinc+1, y+i*yinc)
        # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()

    # 垂直線
    for i in range(xnum+1):
        ctx.beginPath()
    # 設定線的寬度為 1 個單位
        ctx.lineWidth = 1
        ctx.moveTo(x+i*xinc, y)
        ctx.lineTo(x+i*xinc, y+ynum*yinc)
        # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()
    ctx.closePath()

# 一開始 x, y 為圓球圓心, 但是為了配合和弦繪圖
# 將 x, y 改為和弦的左上角座標 x, y
# 配合 w, h, wcoord, hcoord 進行運算得到圓的圓心座標 bx, by
# r 最後配合 w 與 h 較小的值進行運算
def ball(x, y, w, h , wcoord, hcoord, color, ctx):
    bx = x + (wcoord-1)*w
    by = y + (hcoord-1)*h+h/2
    if w &lt; h:
        r2 = w/2 -2
    else:
        r2 = h/2 -2
    ctx.beginPath()
    ctx.fillStyle = color
    ctx.strokeStyle = color
    ctx.arc(bx, by, r2, 0, 2*math.pi, False)
    ctx.fill()
    ctx.stroke()
    ctx.closePath()

# 利用 x, y 定義和弦左上角座標, 放入的圓也必須配合此一座標運算
x = 300
y = 200
w = 20
h = 30
background(x, y, w, h, 5, 4, ctx)
for i in range( 6):
    for j in range(3):
        ball(x, y, w, h, i+1, j+1, 'black', ctx)
ball(x, y, w, h, 1, 4, 'red', ctx)
&lt;/pre&gt;

&lt;p&gt;註記:&lt;/p&gt;
&lt;p&gt;其實使用 html5 CANVAS , 以 png 格式繪製吉他和弦圖, 只是為了讓 Python3 的初學者熟悉變數、數列、迴圈、函式與類別的基本計算機程式語法. 就實用上, 應該要使用 Python3 程式建立 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG"&gt;SVG&lt;/a&gt; 向量圖. &lt;a href="http://www.joebrown.org.uk/wp/?p=8553"&gt;http://www.joebrown.org.uk/wp/?p=8553&lt;/a&gt; 就是採用 Python2 與 MySQL 資料庫建立大量的吉他和絃 SVG 圖, 將這個程式改為 Python3 並且配合網際應用 (Flask), 建立一套可以利用程式方法建立各式歌曲的吉他和絃譜, 並且結合 &lt;a href="https://en.wikipedia.org/wiki/MIDI"&gt;MIDI&lt;/a&gt; 或機械手彈奏, 應該是一系列不錯的專題應用.&lt;/p&gt;</summary><category term="Brython"></category></entry><entry><title>W10 Brython 繪圖範例</title><link href="./w10-brython-hui-tu-fan-li.html" rel="alternate"></link><published>2016-11-14T12:00:00+08:00</published><updated>2016-11-14T12:00:00+08:00</updated><author><name>yen</name></author><id>tag:,2016-11-14:./w10-brython-hui-tu-fan-li.html</id><summary type="html">&lt;p&gt;Brython 繪圖&lt;/p&gt;


&lt;p&gt;繪圖流程, 導入程式庫, 啟動, 然後引用各種模組開始繪圖&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫兩條直線 --&gt;

&lt;canvas id="japanflag1" width="600" height="200"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["japanflag1"]
ctx = canvas.getContext("2d")

# 以下可以利用 ctx 物件進行畫圖
# 先畫一條直線
ctx.beginPath()
# 設定線的寬度為 1 個單位
ctx.lineWidth = 1
# 將畫筆移動到 (100, 100) 座標點
ctx.moveTo(100, 100)
# 然後畫直線到 (150, 200) 座標點
ctx.lineTo(150, 200)
# 畫右上左下的斜線
ctx.moveTo(150, 100)
ctx.lineTo(100, 200)
# 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
ctx.strokeStyle = "blue"
# 實際執行畫線
ctx.stroke()
ctx.closePath()
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫上下垂直線 --&gt;

&lt;canvas id="japanflag2" width="600" height="200"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["japanflag2"]
ctx = canvas.getContext("2d")

# 以下可以利用 ctx 物件進行畫圖
# 先畫一條直線
ctx.beginPath()
# 設定線的寬度為 1 個單位
ctx.lineWidth = 1

for i in range(5):
    ctx.moveTo(100+i*10, 100)
    ctx.lineTo(100+i*10, 200)

# 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
ctx.strokeStyle = "blue"
# 實際執行畫線
ctx.stroke()
ctx.closePath()
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫方格線 --&gt;

&lt;canvas id="japanflag3" width="600" height="300"&gt;&lt;/canvas&gt;

&lt;div id="container3"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import math
import re
# 準備繪圖畫布
canvas = doc["japanflag3"]
container = doc["container3"]
ctx = canvas.getContext("2d")
# 以下可以利用 ctx 物件進行畫圖

# 水平線
for i in range(5):
    ctx.beginPath()
# 設定線的寬度為 1 個單位
    if i == 0:
        ctx.lineWidth = 7
    else:
        ctx.lineWidth = 1
    ctx.moveTo(99, 100+i*30)
    ctx.lineTo(201, 100+i*30)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    ctx.stroke()
    ctx.closePath()

# 垂直線
for i in range(6):
    ctx.beginPath()
# 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    ctx.moveTo(100+i*20, 100)
    ctx.lineTo(100+i*20, 220)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    ctx.stroke()
    ctx.closePath()

# 1 與 A7
ctx.beginPath()
ctx.fillStyle = 'black'
ctx.strokeStyle = "black"
ctx.font = "30px Arial"
ctx.fillText("A7", 100, 70)
ctx.arc(50, 50, 9, 0, 2*math.pi, False)
ctx.fill()
ctx.stroke()
ctx.closePath()

ctx.beginPath()
ctx.fillStyle = 'white'
ctx.font = "16px Arial"
ctx.fillText("1", 45, 55)
ctx.fill()
ctx.stroke()
ctx.closePath()

# 3
ctx.beginPath()
ctx.fillStyle = 'black'
ctx.strokeStyle = "black"
ctx.arc(50, 80, 9, 0, 2*math.pi, False)
ctx.fill()
ctx.stroke()
ctx.closePath()

ctx.beginPath()
ctx.fillStyle = 'white'
ctx.font = "16px Arial"
ctx.fillText("3", 45, 85)
ctx.fill()
ctx.stroke()
ctx.closePath()

# 4
ctx.beginPath()
ctx.fillStyle = 'black'
ctx.strokeStyle = "black"
ctx.arc(50, 110, 9, 0, 2*math.pi, False)
ctx.fill()
ctx.stroke()
ctx.closePath()

ctx.beginPath()
ctx.fillStyle = 'white'
ctx.font = "16px Arial"
ctx.fillText("4", 45, 115)
ctx.fill()
ctx.stroke()
ctx.closePath()

# o
ctx.beginPath()
ctx.arc(50, 140, 7, 0, 2*math.pi, False)
ctx.lineWidth =3
ctx.strokeStyle = "black"
ctx.stroke()
ctx.closePath()

# x
ctx.beginPath()
#ctx.arc(50, 170, 7, 0, 2*math.pi, False)
ctx.moveTo(44, 164)
ctx.lineTo(56, 176)
ctx.moveTo(56, 164)
ctx.lineTo(44, 176)
ctx.lineWidth =3
ctx.strokeStyle = "black"
ctx.stroke()
ctx.closePath()

'''
# 以下將 canvas 畫布內容轉為 img tag, 並且顯示在 container 物件
img = canvas.toDataURL("image/png")
# 利用 re.sub, 將原本要直接開圖檔的 data:image 標頭, 改為 data:application/octet-stream, 可直接下載存檔
# 使用 re 模組之前必須先 import re
img = re.sub("^data:image\/[^;]", "data:application/octet-stream", img)
# 宣告 anchor markup attribute download, 可以指定下載儲存檔名
container &lt;= html.A("save image", href=img, download="guitar_chord.png")
'''
&lt;/script&gt;

&lt;p&gt;請注意, 開發 Brython 程式時, 建議使用 Firefox 開啟網誌, 因為反應速度較 Chrome 快速.&lt;/p&gt;
&lt;p&gt;請各組利用上列程式範例片段, 完成下列和弦繪圖:&lt;/p&gt;
&lt;p&gt;&lt;img src="./../graphics/BasicMajorOpenChords.jpg" /&gt;&lt;/p&gt;
&lt;!-- 以下實際利用  Brython 繪製動畫 --&gt;

&lt;canvas id="stage" width="600" height="600"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
'''
from browser import document
from browser.timer import request_animation_frame

import math
import time

canvas = document['stage']
ctx = canvas.getContext('2d')
ticks = 0
x = 0.0

def mouse_moved(ev):
    global x
    new_x = ev.clientX - (canvas.width / 2) + 25
    if new_x &gt; 50 and new_x &lt; canvas.width - 100:
        x = new_x

canvas.bind("mousemove", mouse_moved)

def clear():
    ctx.save()
    ctx.setTransform(1, 0, 0, 1, 0, 0)
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    ctx.restore()

def draw():
    global ticks
    ticks += 1

    clear()

    y = (150 * math.sin(ticks / 50)) + 150
    ctx.fillStyle = "blue"
    ctx.fillRect(x, y, 100.0, 100.0)
    ctx.fill()

def animate(i):
    global id
    id = request_animation_frame(animate)
    draw()

animate(0)
'''
&lt;/script&gt;</summary><category term="Brython"></category></entry><entry><title>2016Fall CP 學員連結</title><link href="./2016fall-cp-xue-yuan-lian-jie.html" rel="alternate"></link><published>2016-11-05T12:00:00+08:00</published><updated>2016-11-05T12:00:00+08:00</updated><author><name>yen</name></author><id>tag:,2016-11-05:./2016fall-cp-xue-yuan-lian-jie.html</id><summary type="html">&lt;p&gt;利用計算機程式兩班選課名單可以產生個別成員的倉儲、筆記、投影片與網誌.&lt;/p&gt;


&lt;p&gt;有關 Brython html 模組的用法, 請參考 &lt;a href="http://www.brython.info/static_doc/en/html.html"&gt;http://www.brython.info/static_doc/en/html.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;計算機程式甲班成員連結:&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下利用 Brython 程式執行檔案讀取與比對流程 --&gt;

&lt;!-- 假如需要用圖型表示數字, 則利用 canvas 繪圖 --&gt;

&lt;!-- &lt;canvas id="plotarea" width="600" height="400"&gt;&lt;/canvas&gt; --&gt;

&lt;p&gt;甲班學員投影片:&lt;/p&gt;
&lt;div id="container1"&gt;&lt;/div&gt;

&lt;script type="text/python3" id="script1"&gt;
from browser import document, html
container1 = document['container1']
adata = open("./../users/a.txt").read()
alist = adata.splitlines()
n = 0
for stud_num in alist:
    mlink = html.A(stud_num, href="http://s"+str(stud_num)+".github.io/2016fallcp_hw")
    mlink += " | "
    n = n +1
    if n%8 == 0:
        mlink += html.BR()
    container1 &lt;= mlink
&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
甲班學員網誌:&lt;/p&gt;
&lt;div id="container2"&gt;&lt;/div&gt;

&lt;script type="text/python3" id="script2"&gt;
from browser import document, html
from script1 import alist
container2 = document['container2']
n = 0
for stud_num in alist:
    mlink = html.A(stud_num, href="http://s"+str(stud_num)+".github.io/2016fallcp_hw/blog")
    mlink += " | "
    n = n +1
    if n%8 == 0:
        mlink += html.BR()
    container2 &lt;= mlink
&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
甲班學員 wiki:&lt;/p&gt;
&lt;div id="container3"&gt;&lt;/div&gt;

&lt;script type="text/python3" id="script3"&gt;
from browser import document, html
from script1 import alist
container3 = document['container3']
n = 0
for stud_num in alist:
    mlink = html.A(stud_num, href="http://github.com/s"+str(stud_num)+"/2016fallcp_hw/wiki")
    mlink += " | "
    n = n +1
    if n%8 == 0:
        mlink += html.BR()
    container3 &lt;= mlink
&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
甲班學員倉儲:&lt;/p&gt;
&lt;div id="container4"&gt;&lt;/div&gt;

&lt;script type="text/python3" id="script4"&gt;
from browser import document, html
from script1 import alist
container4 = document['container4']
n = 0
for stud_num in alist:
    mlink = html.A(stud_num, href="http://github.com/s"+str(stud_num)+"/2016fallcp_hw")
    mlink += " | "
    n = n +1
    if n%8 == 0:
        mlink += html.BR()
    container4 &lt;= mlink
&lt;/script&gt;

&lt;hr&gt;

&lt;p&gt;乙班學員投影片:&lt;/p&gt;
&lt;div id="container5"&gt;&lt;/div&gt;

&lt;script type="text/python3" id="script5"&gt;
from browser import document, html
container5 = document['container5']
adata = open("./../users/b.txt").read()
alist = adata.splitlines()
n = 0
for stud_num in alist:
    mlink = html.A(stud_num, href="http://s"+str(stud_num)+".github.io/2016fallcp_hw")
    mlink += " | "
    n = n +1
    if n%8 == 0:
        mlink += html.BR()
    container5 &lt;= mlink
&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
乙班學員網誌:&lt;/p&gt;
&lt;div id="container6"&gt;&lt;/div&gt;

&lt;script type="text/python3" id="script6"&gt;
from browser import document, html
from script5 import alist
container6 = document['container6']
n = 0
for stud_num in alist:
    mlink = html.A(stud_num, href="http://s"+str(stud_num)+".github.io/2016fallcp_hw/blog")
    mlink += " | "
    n = n +1
    if n%8 == 0:
        mlink += html.BR()
    container6 &lt;= mlink
&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
乙班學員 wiki:&lt;/p&gt;
&lt;div id="container7"&gt;&lt;/div&gt;

&lt;script type="text/python3" id="script7"&gt;
from browser import document, html
from script5 import alist
container7 = document['container7']
n = 0
for stud_num in alist:
    mlink = html.A(stud_num, href="http://github.com/s"+str(stud_num)+"/2016fallcp_hw/wiki")
    mlink += " | "
    n = n +1
    if n%8 == 0:
        mlink += html.BR()
    container7 &lt;= mlink
&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
乙班學員倉儲:&lt;/p&gt;
&lt;div id="container8"&gt;&lt;/div&gt;

&lt;script type="text/python3" id="script8"&gt;
from browser import document, html
from script5 import alist
container8 = document['container8']
n = 0
for stud_num in alist:
    mlink = html.A(stud_num, href="http://github.com/s"+str(stud_num)+"/2016fallcp_hw")
    mlink += " | "
    n = n +1
    if n%8 == 0:
        mlink += html.BR()
    container8 &lt;= mlink
&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
上述連結代表處理程式:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;
&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下利用 Brython 程式執行檔案讀取與比對流程 --&gt;
&lt;!-- 假如需要用圖型表示數字, 則利用 canvas 繪圖 --&gt;
&lt;!-- &lt;canvas id="plotarea" width="600" height="400"&gt;&lt;/canvas&gt; --&gt;

甲班學員投影片:

&lt;div id="container1"&gt;&lt;/div&gt;

&lt;script type="text/python3" id="script1"&gt;
from browser import document, html
container1 = document['container1']
adata = open("./../users/a.txt").read()
alist = adata.splitlines()
n = 0
for stud_num in alist:
    mlink = html.A(stud_num, href="http://s"+str(stud_num)+".github.io/2016fallcp_hw")
    mlink += " | "
    n = n +1
    if n%8 == 0:
        mlink += html.BR()
    container1 &lt;= mlink
&lt;/script&gt;

&lt;br /&gt;
甲班學員網誌:

&lt;div id="container2"&gt;&lt;/div&gt;

&lt;script type="text/python3" id="script2"&gt;
from browser import document, html
# 學員選課名單直接從 id 為 script1 的程式段中導入
from script1 import alist
container2 = document['container2']
n = 0
for stud_num in alist:
    mlink = html.A(stud_num, href="http://s"+str(stud_num)+".github.io/2016fallcp_hw/blog")
    mlink += " | "
    n = n +1
    if n%8 == 0:
        mlink += html.BR()
    container2 &lt;= mlink
&lt;/script&gt;
&lt;/pre&gt;</summary><category term="評分"></category></entry></feed>